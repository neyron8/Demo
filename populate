#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *remove_sim(char *s) {
  char res[200];
  int i = 0, k = 0;

  for (i = 0; i < slen(s); i++) {
    if (s[i] != ' ') {
      res[k] = s[i];
      k++;
    }
  }
  // printf("%s", res);
  return res;
}

int sch(char str[], char sim) {
  int i, idx = -1;
  for (i = 0; (str[i] != '\0') && (str[i] != sim); i++)
    ;
  if (str[i] == sim) {
    idx = i;
  }
  return idx;
}

char *change(char *s, char sim, char zam) {
  int i;
  for (i = 0; s[i] != '\0'; i++) {
    if (s[i] == sim) {
      s[i] = zam;
    }
  }
  for (i = 0; s[i] != '\0'; i++) {
    if ((s[i] == zam) && (s[i + 1] == zam)) {
      s[i] = ' ';
    }
  }

  return s;
}

int stok(char str[], char delim, char *ptr[]) {
  char *suf = str;
  ptr[0] = str;
  int i, j = 1;
  while ((i = sch(suf, delim)) >= 0) {
    suf[i] = '\0';
    suf = suf + i + 1;
    ptr[j] = suf;
    j++;
  }
  return j;
}

int suntok(char str[], char delim, char *ptr[], int cnt) { // cnt dlina ptr
  int i;
  for (i = 1; i < cnt; i++) {
    *(ptr[i] - 1) = delim;
  }
  return 0;
}

int slen(char *str) {
  int i;
  for (i = 0; str[i] != '\0'; i++)
    ;
  int len = i;
  return len;
}

int scopy(char *first, char *second) {
  int i;
  for (i = 0; first[i] != '\0'; i++) {
    second[i] = first[i];
  }
  second[i] = '\0';
  return 0;
}

int scmp(char *s1, char *s2) {
  int i, flag = 0;
  for (i = 0; (s1[i] == s2[i]) && s1[i] != '\0' && s2[i] != '/0'; i++)
    ;
  if (s1[i] < s2[i]) {
    flag = -1;
  } else if (s1[i] > s2[i]) {
    flag = 1;
  }
  return flag;
}

int sspn(char *s, char *dop) {
  int i;
  for (i = 0; s[i] != '\0'; i++) {
    if (sch(dop, s[i]) < 0) {
      break;
    }
  }
  return i;
}

int check(char *str, char *dop) {
  int flag = 0;
  if (slen(str) > 260) {
    return 1;
  }

  flag = sspn(str, dop);
  if (flag < slen(str)) {
    return 2;
  }
  return 0;
}

int output(char *str, int end) {
  if (end == 2) {
    printf("Unallowable symbol\n");
    return;
  }
  if (end == 1) {
    printf("Too large string\n");
    return;
  }
  printf("Result:\n");
  printf("%s", str);
  return 0;
}

char *input(char *str) {
  int flag = 0;
  check(str, "/");
  if (flag == 1 || flag == 2) {
    output(str, flag);
  }
  return str;
}

int process(char *str) {
  int flag = 0, count;
  char *work;
  char *sol;
  char *po[100];
  char str1[100];
  char str2[100];
  char str3[100];
  char tt[30];
  work = (char *)malloc(260);
  work = input(str);
  work = change(work, '\\', '/');
  work = change(work, ':', '/');
  printf("BEFORE STOK%s\n", work);
  // work = remove_sim(work);
  count = stok(work, '+', po);
  char syg1[] = {"/cygdrive/"};
  char syg2[] = {"/cygdrive/"};
  // syg3[] = {"/cygdrive/"};
  // printf("%s\n", *(po));
  strcpy(str1, *po);
  strcpy(str2, *(po + 1));
  // strcpy(*(po + 2), str3);
  scat(syg1, str1);
  // strcat(syg2, str2);
  printf("BEFORE STR CAT %s\n", syg1);
  printf("BEFORE STR CAT %s\n", str2);
  // printf("BEFORE STR CAT %s\n", syg2);
  scat(syg2, str2);
  printf("after STR CAT %s\n", str2);
  printf("after STR CAT %s", syg2);
  // printf("%s", syg1);
  // scat(syg2, str2);
  // scat(syg1, str1);
  // scat(syg );
  // printf("%d\n", slen(*po));
  // printf("%d\n", slen(*(po + 1)));
  // printf("%s\n", syg1);
  return 0;
}

int scat(char *s1, char *s2) {
  int len = slen(s1);
  char *suf = s1 + len;
  scopy(s2, suf);
  return 0;
}

int main() {
  // char k[] = {"fd+"};
  // char *po[19];
  // printf("%d\n", slen(k));
  // char test[] = {"2+2=41"};
  // stok(test, '+', po);
  // printf("%d\n", slen(*po));
  // printf("%d\n", slen(*(po + 1)));
  // scat(test, k);
  // printf("%s\n", test);
  char stro[200] = {
      "C:\\Windows\\system32+E:\\Distrib\\msoffice.exe+/home/alex/prog/lab4.c"};
  process(stro);
  // remove_sim(stro);
  // printf("%s", remove_space(stro));
  // process(stro);
  return 0;
}
